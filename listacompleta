, avaliar_posfixa(expr1)); 
    printf("'%s' = %d\n", expr2, avaliar_posfixa(expr2));
    
    return 0;
}

exercício 27

#include <stdio.h>
#include <stdlib.h>

#define TAM 100

typedef struct {
    int dados[TAM];
    int topo;
} Pilha;

typedef struct {
    Pilha entrada;
    Pilha saida;
} FilaComPilhas;

void push(Pilha *p, int valor) {
    if (p->topo == TAM-1) return;
    p->dados[++p->topo] = valor;
}

int pop(Pilha *p) {
    if (p->topo == -1) return -1;
    return p->dados[p->topo--];
}

int esta_vazia(Pilha *p) {
    return p->topo == -1;
}

void enfileirar(FilaComPilhas *f, int valor) {
    push(&f->entrada, valor);
}

int desenfileirar(FilaComPilhas *f) {
    if (esta_vazia(&f->saida)) {
        while (!esta_vazia(&f->entrada)) {
            push(&f->saida, pop(&f->entrada));
        }
    }
    return pop(&f->saida);
}

int frente(FilaComPilhas *f) {
    if (esta_vazia(&f->saida)) {
        while (!esta_vazia(&f->entrada)) {
            push(&f->saida, pop(&f->entrada));
        }
    }
    return f->saida.dados[f->saida.topo];
}

int main() {
    FilaComPilhas f = { .entrada = { .topo = -1 }, .saida = { .topo = -1 } };
    
    enfileirar(&f, 1);
    enfileirar(&f, 2);
    enfileirar(&f, 3);
    
    printf("Frente: %d\n", frente(&f));
    printf("Desenfileirar: %d\n", desenfileirar(&f));
    printf("Desenfileirar: %d\n", desenfileirar(&f));
    
    enfileirar(&f, 4);
    printf("Frente: %d\n", frente(&f));
    
    return 0;
}

exercício 28

#include <stdio.h>
#include <stdlib.h>

typedef struct No {
    int valor;
    struct No* proximo;
} No;

No* inverter_grupos(No* inicio, int k) {
    No* atual = inicio;
    No* anterior = NULL;
    No* proximo = NULL;
    int contador = 0;
   
    while (atual != NULL && contador < k) {
        proximo = atual->proximo;
        atual->proximo = anterior;
        anterior = atual;
        atual = proximo;
        contador++;
    }
   
    if (proximo != NULL) {
        inicio->proximo = inverter_grupos(proximo, k);
    }
    
    return anterior;
}

No* criar_no(int valor) {
    No* novo = (No*)malloc(sizeof(No));
    novo->valor = valor;
    novo->proximo = NULL;
    return novo;
}

void imprimir_lista(No* inicio) {
    No* atual = inicio;
    while (atual != NULL) {
        printf("%d ", atual->valor);
        atual = atual->proximo;
    }
    printf("\n");
}

void liberar_lista(No* inicio) {
    No* atual = inicio;
    while (atual != NULL) {
        No* temp = atual;
        atual = atual->proximo;
        free(temp);
    }
}

int main() {
    No* lista = criar_no(1);
    lista->proximo = criar_no(2);
    lista->proximo->proximo = criar_no(3);
    lista->proximo->proximo->proximo = criar_no(4);
    lista->proximo->proximo->proximo->proximo = criar_no(5);
    
    printf("Lista original: ");
    imprimir_lista(lista);
    
    int k = 2;
    lista = inverter_grupos(lista, k);
    
    printf("Lista invertida em grupos de %d: ", k);
    imprimir_lista(lista);
    
    liberar_lista(lista);
    return 0;
}

exercício 29

#include <stdio.h>
#include <stdlib.h>

typedef struct No {
    int valor;
    struct No* proximo;
} No;

No* inverter_metade(No* inicio) {
    No* anterior = NULL;
    No* atual = inicio;
    No* proximo = NULL;
    
    while (atual != NULL) {
        proximo = atual->proximo;
        atual->proximo = anterior;
        anterior = atual;
        atual = proximo;
    }
    
    return anterior;
}

int eh_palindromo(No* inicio) {
    if (inicio == NULL || inicio->proximo == NULL) {
        return 1;
    }
    
    No* lento = inicio;
    No* rapido = inicio;
    No* anterior = NULL;
    
    while (rapido != NULL && rapido->proximo != NULL) {
        anterior = lento;
        lento = lento->proximo;
        rapido = rapido->proximo->proximo;
    }
    
    if (rapido != NULL) {
        lento = lento->proximo;
    }
    
    anterior->proximo = NULL;
    No* segunda_metade = inverter_metade(lento);
    No* primeira_metade = inicio;
    
    while (primeira_metade != NULL && segunda_metade != NULL) {
        if (primeira_metade->valor != segunda_metade->valor) {
            return 0;
        }
        primeira_metade = primeira_metade->proximo;
        segunda_metade = segunda_metade->proximo;
    }
    
    return 1;
}

No* criar_no(int valor) {
    No* novo = (No*)malloc(sizeof(No));
    novo->valor = valor;
    novo->proximo = NULL;
    return novo;
}

void liberar_lista(No* inicio) {
    No* atual = inicio;
    while (atual != NULL) {
        No* temp = atual;
        atual = atual->proximo;
        free(temp);
    }
}

int main() {
    No* lista1 = criar_no(1);
    lista1->proximo = criar_no(2);
    lista1->proximo->proximo = criar_no(3);
    lista1->proximo->proximo->proximo = criar_no(2);
    lista1->proximo->proximo->proximo->proximo = criar_no(1);
    
    printf("Lista 1 é palíndromo? %d\n", eh_palindromo(lista1));
    
    No* lista2 = criar_no(1);
    lista2->proximo = criar_no(2);
    lista2->proximo->proximo = criar_no(3);
    
    printf("Lista 2 é palíndromo? %d\n", eh_palindromo(lista2));
    
    liberar_lista(lista1);
    liberar_lista(lista2);
    
    return 0;
}

exercício 30

#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

typedef struct {
    int dados[MAX_SIZE];
    int topo;
} Pilha;

void push(Pilha *p, int valor) {
    if (p->topo == MAX_SIZE-1) return;
    p->dados[++p->topo] = valor;
}

int pop(Pilha *p) {
    if (p->topo == -1) return -1;
    return p->dados[p->topo--];
}

int topo(Pilha *p) {
    if (p->topo == -1) return -1;
    return p->dados[p->topo];
}

int calcularAgua(int barras[], int n) {
    Pilha p = { .topo = -1 };
    int agua = 0;
    
    for (int i = 0; i < n; i++) {
        while (p.topo != -1 && barras[i] > barras[topo(&p)]) {
            int base = pop(&p);
            if (p.topo == -1) break;
            
            int distancia = i - topo(&p) - 1;
            int altura = (barras[i] < barras[topo(&p)] ? barras[i] : barras[topo(&p)]) - barras[base];
            agua += distancia * altura;
        }
        push(&p, i);
    }
    
    return agua;
}

int main() {
    int barras[] = {0,1,0,2,1,0,1,3,2,1,2,1};
    int n = sizeof(barras)/sizeof(barras[0]);
    
    printf("Água retida: %d\n", calcularAgua(barras, n));
    
    return 0;
}
